.chapter(data-title='Account Verification Flask')
  .step(data-title='Introduction', data-file='account_verification_flask/__init__.py')
    :markdown
      ## Introduction

      In this example, we're using the [Flask](http://flask.pocoo.org/) framework for Python. Flask is a popular, lightweight
      web framework that provides HTTP request routing, server-side HTML rendering, and an extensible stack to
      process incoming requests.

      Ready to implement user account verification in your application? Here's how it works at a high level:

      1. The user begins the registration process by entering his/her data, including a phone number, into a signup form

      1. The authentication system sends a one-time password to the user's mobile phone to verify their possession of that phone number

      1. The user enters the one-time password into a form before completing registration

      1. The user gets a success page and receives a SMS indicating that his/her account has been created

      ## Building Blocks

      To get this done, you'll be working with the following Twilio-powered APIs:

      **Authy REST API**

      * [Authy Docs](//docs.authy.com/): Find quick starts, documentation, and all about the helper libraries.

      **Twilio REST API**
      * [Messages Resource](//www.twilio.com/docs/api/rest/sending-messages): We
      will use Twilio directly to send our user a confirmation message after they
      create an account

      Let's get started! Click the right arrow to move on to the next step of the tutorial.

  .step(data-title='Application configuration' data-file='account_verification_flask/config.py')
    :markdown
      ## Application configuration

      For this application we'll be using the
      [The Twilio Python Helper Library](//www.twilio.com/docs/python/install) and the
      [Python Client for Authy API](//github.com/authy/authy-python), which requires some configuration:

      You need to edit the `DevelopmentConfig` class constants values located in `account_verification_flask/config.py` file:
      ```
      AUTHY_KEY = 'your_authy_key'

      TWILIO_ACCOUNT_SID = 'your_twilio_account_sid'
      TWILIO_AUTH_TOKEN = 'your_twilio_auth_token'
      TWILIO_NUMBER = 'your_twilio_phone_number'

      SQLALCHEMY_DATABASE_URI = 'sqlite://'
      ```
      Note that you have to replace the placeholders `your_twilio_account_sid`, `your_twilio_auth_token`, `your_twilio_phone_number`
      and `your_authy_key` with your production information,
      which you can find in your [Twlio Account Dashboard](/user/account) and your [Authy
      dashboard](https://dashboard.authy.com/signup) respectively.

      Also, this application is being built using [sqlite](https://www.sqlite.org/) as database engine. It's default configured
      to use in-memory storage because [SQLAlchemy](http://www.sqlalchemy.org/), the ORM used, requires
      absolutes path while defining sqlite's connection strings. We  encourage you to specify an **always absolute path** to a
      local sqlite DB file of your choice by editing the `SQLALCHEMY_DATABASE_URI` key value.

      **See Also:**

      * [Using SQLAlchemy in Flask](//pythonhosted.org/Flask-SQLAlchemy/)

  .step(data-title='User Model', data-file='account_verification_flask/models/models.py')
    :markdown
      ## The User Model

      The User Model for this use-case is pretty straight-forward, the only property that deserves an explanation it's  `authy_user_id`,
      which is intended for storing the user's Authy identification token.

      Also, as we'll be using a library named
      [Flask-Login](https://flask-login.readthedocs.org/en/latest/) for user's session management, we defined
      a couple of methods required to interact properly with it.

      **See Also:**

      * [User model with Flask-Login ](//flask-login.readthedocs.org/en/latest/#your-user-class)

  .step(data-title='Registration Form', data-file='account_verification_flask/templates/register.html',data-highlight='9-26'
        data-mode='html')
    :markdown
      ## Registration Form

      During the registration of a new user, we ask for a name, an E-mail address, and a password.
      In order to validate user account, we also ask them for a mobile number
      with a country code, which we can use with Authy to send the verification code
      via SMS.

      In this example we use [WTForms](//github.com/wtforms/wtforms) library for the purpose of forms validation and rendering, which allow us
      to define forms as classes.

      Here is how our `RegisterForm` class will look once finished:

      ```
      class RegisterForm(Form):
        name = TextField(
            'Tell us your name',
            validators=[DataRequired(message="Name is required"),
                        Length(min=3,message="Name must greater than 3 chars")]
        )
        email = TextField(
            'Enter your E-mail',
            validators=[DataRequired("E-mail is required"),
                        Email(message="Invalid E-mail address")]
        )
        password = PasswordField(
            'Password',
            validators=[DataRequired("Password is required")]
        )
        country_code = TextField(
            'Country Code',
            validators=[DataRequired("Country code is required"),
                        Length(min=1, max=4, message="Country must be between 1 and 4 chars")]
        )
        phone_number = IntegerField(
            'Phone Number',
            validators=[DataRequired("Valid phone number is required")]
        )

      ```

      **See Also:**

      * [Form Validation with WTForms](//flask.pocoo.org/docs/0.10/patterns/wtforms/)


  .step(data-title='Registration server side implementation' data-file='account_verification_flask/views.py', data-highlight='20-50')
    :markdown
      ## Registration server side implementation

      It's now the controller's responsibility to verify that the user provides the required information to
      create a new user. If all goes good the controller should persist it in the database, registers the user under
      Authy's API and requests the send of the verification code to the user through the `AuthyServices.new().request_phone_confirmation_code(user)`
      method invocation, which will be explained a few sections ahead.

      The flow finalizes with the redirect of the user to the verification code page.

  .step(data-title='Verification Form and UI' data-file='account_verification_flask/templates/verify_registration_code.html',data-highlight='5-35'
        data-mode='html')
    :markdown
      ## Verification Form and UI

      As stated before, once the user completes the registration he/she gets redirected to the verification page, which you may access
      at any time using the route `/verify`. This page consists in a simple form where you can input your
      account E-mail address, to get identify as you, and the sent SMS verification code.

      Here is the code for the `VerifyCodeForm` class:
      ```
      class VerifyCodeForm(ResendCodeForm):
        verification_code = TextField(
            'Verification Code',
            validators=[DataRequired("Verification code is required")]
        )

      ```

  .step(data-title='Verification server side implementation' data-file='account_verification_flask/views.py', data-highlight='52-79')
    :markdown
      ## Verification server side implementation

      The server side implementation for the registration process confirmation ensures the given E-mail belongs to previously registered user which hasn't
      performed the verification process yet.

      From this moment the process have two critical steps:
      1. It communicates with Authy's API to check is the given code is correct.
      If verification is performed
      as positive, it signs in the user and performs the second critical step:

      1. Send a confirmation SMS, using Twilio's API, to the user.

      Finally it redirects the user to a success page.

      The communication to Authy's and Twilio's APIs will gets explained a few slides ahead.

  .step(data-title='Re send verification code' data-file='account_verification_flask/views.py', data-highlight='81-106')
    :markdown
      ## Re send verification code

      This is really really simple stuff. It consists in a simple form

      ```
      class ResendCodeForm(Form):
        email = TextField(
            'E-mail',
            validators=[DataRequired("E-mail is required"),
                        Email(message="Invalid E-mail address")]
        )

      ```

      that gets the user's
      E-mail, verifies if belongs to a previously registered user not verified yet and request a verification code to be sent to his/her
      registered mobile phone.

  .step(data-title='Request verification code' data-file='account_verification_flask/services/authy_services.py'
        data-highlight="13-21")
    :markdown
      ## Request verification code

      In order to end up with a cleaner and decoupled design we'll encapsulate all Authy's related features in a `AuthyService`.
      This class holds a shared class instance of the `AuthyApiClient` class.

      A send verification code request will begin with an invocation to `request_phone_confirmation_code` method. It will verify if the user exists
      and if it has an `authy_user_Id` value, fact that indicates it has been previously registered using Authy API. If not, we request the creation
      of a new Authy user to the `AuthyApiClient` instance which returns the `authy_user_Id` for the newly registered user, and updates it with that value.

      Finally, to order Authy to send the verification code to the user, we call the `request_sms` method on the `AuthyClient` instance passing it the user's
      `AuthyUserId` and a dictionary with a `True` value for a `force` key. This is mandatory because
      that way we force Authy to send an SMS explicitly, which may not happen according to the Authy's user profile settings and devices, if he/she
      is already and Authy's user, and the Authy's alternatives verification methods, but that's out of our scope.

  .step(data-title='Verification code confirmation' data-file='account_verification_flask/services/authy_services.py'
        data-highlight="23-28")
    :markdown
      ## Verification code confirmation

      If you recall, the registration process confirmation is composed of two steps according to our
      [controller](//github.com/TwilioDevEd/account-verification-flask/blob/487b272b4993c6952f5d2b8cbc75eb75cefdad3c/account_verification_flask/views.py#L68-L73).
      The first one, confirming the verification code, get addressed as follows:

      We add a `confirm_phone_number` method to our `AuthyService` class. This method will call Authy API's `VerifyToken` method,
      which returns a `boolean` indicating if the code is correct.

      This method returns an `Boolean` object indicating the verification process's result. If positive, it will lead the controller
      to the second step of registration process confirmation.

  .step(data-title='Account confirmation notification' data-file='account_verification_flask/services/twilio_services.py')
    :markdown
      ## Account confirmation notification

      The second step for registration process confirmation implies that once the verification code gets confirmed, the controller signs in the user and
      sends a registration confirmation notification using Twilio SMS API.

      As seen in the
      [`Views Controller`](//github.com/TwilioDevEd/account-verification-flask/blob/487b272b4993c6952f5d2b8cbc75eb75cefdad3c/account_verification_flask/views.py#L72),
      this is achieved using ours `TwilioServices` class's `send_registration_success_sms`.

      This class follows the same philosophy of `AuthyServices` class and underneath uses a `TwilioRestClient` with our Twilio's preconfigured SID and Auth Token for
      sending an SMS to the messages's destination number, which in fact is the user's phone number, from our previously configured Twilio's number.

      Check the code in the right to see how it looks once finished and be aware, we are almost done.
  .step(data-title='Where to Next?')
    :markdown
      ## Where to Next?

      That's it! We've just implemented account verification so your users can
      confirm the registration process through their phone number. If you're a Python/Flask developer working with Twilio,
      you might want to check out these other tutorials:

      [**Appointment Reminders**](//www.twilio.com/docs/tutorials/walkthrough/appointment-reminders/python/flask)

      Use Twilio to automate the process of reaching out to your customers in advance of an upcoming appointment.

      [**Two-Factor Authentication with Authy**](//www.twilio.com/docs/tutorials/walkthrough/two-factor-authentication/python/flask)

      Use Twilio and Twilio-powered Authy OneTouch to implement two-factor authentication (2FA) in your web app

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet
      [@twilio](http://twitter.com/twilio) to let us know what you think.
