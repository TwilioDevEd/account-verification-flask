.chapter(data-title='Account Verification Flask')
  .step(data-title='Introduction', data-file='account_verification_flask/__init__.py')
    :markdown
      ## Introduction

      In this example, we're using the [Flask](http://flask.pocoo.org/) framework for Python. Flask is a popular, lightweight
      web framework that provides HTTP request routing, server-side HTML rendering, and an extensible stack to
      process incoming requests.

      Ready to implement user account verification in your application? Here's how it works at a high level:

      1. The user begins the registration process by entering his/her data, including a phone number, into a signup form

      1. The authentication system sends a one-time password to the user's mobile phone to verify their possession of that phone number

      1. The user enters the one-time password into a form before completing registration

      1. The user gets a success page and receives a SMS indicating that his/her account has been created

      ## Building Blocks

      To get this done, you'll be working with the following Twilio-powered APIs:

      **Authy REST API**

      * [Authy Docs](//docs.authy.com/): Find quick starts, documentation, and all about the helper libraries.

      **Twilio REST API**
      * [Messages Resource](//www.twilio.com/docs/api/rest/sending-messages): We
      will use Twilio directly to send our user a confirmation message after they
      create an account

      Let's get started! Click the right arrow to move on to the next step of the tutorial.

  .step(data-title='Application configuration' data-file='account_verification_flask/config.py')
    :markdown
      ## Application configuration

      For this application we'll be using the
      [The Twilio Python Helper Library](//www.twilio.com/docs/python/install) and the
      [Python Client for Authy API](//github.com/authy/authy-python), which requires some configuration:

      You need to edit the `DevelopmentConfig` class constants values located in `account_verification_flask/config.py` file:
      ```
      AUTHY_KEY = 'your_authy_key'

      TWILIO_ACCOUNT_SID = 'your_twilio_account_sid'
      TWILIO_AUTH_TOKEN = 'your_twilio_auth_token'
      TWILIO_NUMBER = 'your_twilio_phone_number'

      SQLALCHEMY_DATABASE_URI = 'sqlite://'
      ```
      Note that you have to replace the placeholders `your_twilio_account_sid`, `your_twilio_auth_token`, `your_twilio_phone_number`
      and `your_authy_key` with your production information,
      which you can find in your [Twlio Account Dashboard](/user/account) and your [Authy
      dashboard](https://dashboard.authy.com/signup) respectively.

      **See Also:**

      * [Using SQLAlchemy in Flask](//pythonhosted.org/Flask-SQLAlchemy/)

  .step(data-title='User Model', data-file='account_verification_flask/models/models.py')
    :markdown
      ## The User Model

      The User Model for this use-case is pretty straight-forward, the only property that deserves an explanation is the `authy_user_id`,
      which is intended for storing the user's Authy identification token.

      We'll be using a library named
      [Flask-Login](https://flask-login.readthedocs.org/en/latest/) for user session management.

      **See Also:**

      * [User model with Flask-Login ](//flask-login.readthedocs.org/en/latest/#your-user-class)

  .step(data-title='Registration Form', data-file='account_verification_flask/templates/register.html',data-highlight='9-26'
        data-mode='html')
    :markdown
      ## Registration Form

      First we register the user.
      In order to validate user account, we need a mobile number
      with a country code, which we can use with Authy to send the verification code
      via SMS.

      In this example we validate and render the forms with the [WTForms](//github.com/wtforms/wtforms) library which allows us
      to define forms as classes.

      ```

      **See Also:**

      * [Form Validation with WTForms](//flask.pocoo.org/docs/0.10/patterns/wtforms/)


  .step(data-title='Registration server side implementation' data-file='account_verification_flask/views.py', data-highlight='20-50')
    :markdown
      ## Registration server side implementation

      Next our controller stores the user, registers her under Authy's API and requests a new verification code be sent to the user.

      Finally we redirect to the [verification form](//github.com/TwilioDevEd/account-verification-flask/templates/verify_registration_code.html).


  .step(data-file='account_verification_flask/views.py', data-highlight='52-79')
    :markdown
      ## Verifying the Code

      On the server we then check that the email belongs to a user that we haven't verified yet.

      From this moment the process has two critical steps:
      1. It communicates with Authy's API to check is the given code is correct.

      1. Sends a confirmation SMS, using Twilio's API, to the user.

      Finally it redirects the user to a success page.

      The communication to Authy's and Twilio's APIs will gets explained a few slides ahead.

  .step(data-title='Sending the code' data-file='account_verification_flask/views.py', data-highlight='85-110')
    :markdown
      ## Sending the Code

      Since the form for re-sending the code is one line, we're going to skip that for this tutorial. Let's just look at the controller function.

      This controller loads the `User` associated with the request and then
      uses the same Authy API method we used earlier to resend the code.
      Pretty straightforward!

      To wrap things up, let's implement the last step where we confirm for the
      user that their account has been verified with a text message and a success page.

  .step(data-title='Request verification code' data-file='account_verification_flask/services/authy_services.py'
        data-highlight="13-21")
    :markdown
      ## Sending a Token on Account Creation

      In order to end up with a cleaner and decoupled design we'll encapsulate all Authy's related features in a `AuthyService`.
      This class holds a shared class instance of the `AuthyApiClient` class.

      Once the user has an `authyId`, we can actually send a verification code
      to that user's mobile phone. 

      When our user is created successfully via the form we implemented, we send
      a token to the user's mobile phone to verify their account in our
      controller. When the code is sent, we redirect to another page where the
      user can enter the token they received, completing the verification process.

      Let's check out the code for that next!

  .step(data-file='account_verification_flask/services/authy_services.py'
        data-highlight="23-28")
    :markdown
      ## Verifying the Code

      Authy provides us with a `tokens.verify` method that allows us to pass a
      user id, and token. In this case we just
      need to check that the API request was successful and if so set
      a flag on the user that they were verified. 

      That's all for token verification!

  .step(data-file='account_verification_flask/services/twilio_services.py')
    :markdown
      ## Sending the Confirmation Message

      Much as we did for our Authy client, we create a single instance of the
      Twilio REST API helper, called `twilio_client` in this example.

      Then all we need to do to send an sms to the user's phone is use the built
      in `messages.create()`.
      
      For more information on how to send SMS using Twilio's Rest API visit this
      [link](//twilio-python.readthedocs.org/en/latest/usage/messages.html#sending-a-text-message).
      
      ---

      **See Also:**
      * [Twilio Rest API Documentation](https://www.twilio.com/docs/api/rest)
      * [Sending SMS With the API](//www.twilio.com/docs/api/rest/sending-messages)
  .step(data-title='Where to Next?')
    :markdown
      ## Where to Next?

      That's it! We've just implemented account verification so your users can
      confirm the registration process through their phone number. If you're a Python/Flask developer working with Twilio,
      you might want to check out these other tutorials:

      [**Appointment Reminders**](//www.twilio.com/docs/tutorials/walkthrough/appointment-reminders/python/flask)

      Use Twilio to automate the process of reaching out to your customers in advance of an upcoming appointment.

      [**Two-Factor Authentication with Authy**](//www.twilio.com/docs/tutorials/walkthrough/two-factor-authentication/python/flask)

      Use Twilio and Twilio-powered Authy OneTouch to implement two-factor authentication (2FA) in your web app

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet
      [@twilio](http://twitter.com/twilio) to let us know what you think.
